//Diziler:
//RAM de aynı isimli alanda, aynı tip birden fazla deger tutmak için kullanılan veri yapılarıdır. Verilere indis'ler uzerinden ulaşılır...

//Dizilerde ilk elemanın indisi 0 dir...
//Son elemanın indisi= n-1

string ad1, ad2, ad3;

//ad1 = Console.ReadLine();
//ad2 = Console.ReadLine();   
//ad3= Console.ReadLine();

//Console.WriteLine(ad1);
//Console.WriteLine(ad2);
//Console.WriteLine(ad3);


//Dizi tanımlama
string[] isimler = new string[10];
int[] sayilar = new int[10];
int[] puanlar = { 45, 56, 67, 66 };
string[] sehirler = { "Istanbul", "Ankara" };

//Dizi elemanına ulasma(atama,alma)
sayilar[2] = 33;

Console.WriteLine(sayilar[2]);

//Run-Time da hata verir...
//IndexOutOfRange Exception....
//sayilar[10] = 11;

for (int i = 0; i < sayilar.Length; i++)
{
    Console.WriteLine(sayilar[i]);
}



//Dizilerin boyutu(RANK) derece-rutbe

//Düzenli diziler
int[] sayilar = new int[100]; //derecesi 1 olan dizi
int[,] matris = new int[10, 10]; //derecesi 2 olan dizi
int[,,] kup = new int[10, 10, 10]; //derecesi 3 olan dizi...

Console.WriteLine(sayilar.Rank);
Console.WriteLine(matris.Rank);
Console.WriteLine(kup.Rank);

//Düzensiz Dizi
//Jagged array
//Dizlerin dizisi
int[][] jagged = new int[3][];


int[] numbers = {34,567,1,45,345,77,987 };
//Array.Sort(numbers);
Array.Reverse(numbers);
Console.WriteLine("----------");
foreach (int i in numbers)
    Console.WriteLine(i);






//Kullanıcı tarafından boyutu belirlenen, bir tamsayi dizinin tum elemanlarını kullanıcıdan alan kodu yazınız?

Console.WriteLine("Elaman sayisi ne olsun?");
int elemanSayisi =int.Parse(Console.ReadLine());
int[] sayilar =new int[elemanSayisi];

for (int i = 0; i < sayilar.Length; i++)
{
    sayilar[i]=int.Parse(Console.ReadLine());
}

Console.WriteLine("Dizinin eleman sayisi=" + sayilar.Length);

for(int i = 0;i < elemanSayisi; i++)
    Console.WriteLine($"{i}. indisdeki deger ={sayilar[i]}");



//foreach dongusu...
//Kolekisyonlar üzerinde çalışır...
//sayac değişkenine gerek yok...
//dizinin boyutunu bilmek zorunda değiliz...
//iterasyon değişkeni sadece okunabilirdir...
foreach (int sayi in sayilar)
{
    Console.WriteLine($"{sayi}");
    //sayi = 11;
}

Foreach kullanım yerleri;
En farklı döngüdür.
Koleksiyonlarda çalışır.
IEnumearable interface ini uygulamış class lar üzerinde çalışır. Mülakat!!
Sadece birer birer ilerler.
iterasyon değişkeni sadece okunabilirdir. Ienumerator içinde sadece get var çünkü.

-----------------------------------------------------------------------------------------------------

#region ArrayKonuAnlatımı

/*

int[] numbers = new int[10]; // 10 adet elemandan oluşan bir dizi tanımladık
numbers[0] = 1; // 0.indekse ilk elemana 1 değerini atadık 1
numbers[1] = 3; // 2
numbers[2] = 2; // 3
numbers[3] = 10; // 4
numbers[4] = 6; // 5
numbers[5] = 8; // 6
numbers[6] = 9; // 7
numbers[7] = 13; // 8
numbers[8] = 67; // 9
numbers[9] = 56; // 10
								 // numbers[10] = 78; // 9.indeks son index 11.eleman

// IndexOutOfRangeException hatasını dizi eleman sayısını aşarsak alırız.


for (int index = 0; index < numbers.Length; index++)
{
	Console.WriteLine($"{index + 1}. elamanın değeri {numbers[index]}");
}

// kullanıcıya kaç adet numaradan oluşan bir dizi tanımlamamızı soralım
// daha sonra kullanıcı sıra ile bu dizi elemanlarına değer girsin
// program bu girilen değerlerden en büyüğünü ekrana yazdırsın

Console.WriteLine("Kaç elemanı bir dizi oluşturmak istersiniz");
int elemanSayisi = int.Parse(Console.ReadLine());
int[] numaraDizisi = new int[elemanSayisi]; 

for (int index = 0; index < numaraDizisi.Length; index++)
{
	Console.WriteLine($"{index + 1}. sayıyı giriniz");
	int sayi = int.Parse(Console.ReadLine());
	numaraDizisi[index] = sayi;

}


Array.Sort(numaraDizisi); // küçükten büyüğe doğru sırala
Array.Reverse(numaraDizisi); // sıralama sonrasında reverse ettik yani büyükten küçüğe sıraladı.
Console.WriteLine($"En büyük {numaraDizisi[0]}"); // ilkincisi en büyük
Console.WriteLine($"En küçük {numaraDizisi[numaraDizisi.Length - 1]}"); // sonuncusu en küçük

*/


#endregion

-----------------------------------------------------------------------------------------------------

#region FarklıTipteDiziTanımlama

// eleman sayısı sabit ise biliyorsak bu şekilde yazılabilir.
//string[] mevsimler = { "yaz", "kış", "sonbahar", "ilkbahar" };

//string[] isimler = new string[5];
//isimler[0] = "ali";
//isimler[1] = "ahmet";

//char[] karakterler = new char[5];
//karakterler[0] = 'A';
//karakterler[2] = 'B';

//double[] notlar = new double[5];
//notlar[0] = 80.5;
//notlar[1] = Convert.ToDouble("70.7");

#endregion
--------------------------------------------------

#region TekBoyutluDiziMevsimler

/*

// aylar ocak-subat dizisi
// kullanıcının girdiği aya göre ekrana yaz kış ilkbahar sonbahar çıktısı yazdıran program
// çıktı eylül ayı kışa denk gelir
// eylül yazınca hangi ay olduğu eylül 9. aydır ve sonbahar mevsimindedir.


string[] mevsimler3 = { "","Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık" };

// 11,0,1 arası kış
// 2,3,4 ilkbahar
// 5,6,7 yaz
// 8,9,10 sonbahar

Console.WriteLine("Ayı giriniz");
string okunanAy = Console.ReadLine();


for (int i = 0; i < mevsimler3.Length; i++)
{
  string mevsim = string.Empty;

  switch (i)
  {
    case 11:
    case 0:
    case 1:
      mevsim = "kış";
      break;
    case 2:
    case 3:
    case 4:
      mevsim = "ilkbahar";
      break;
    case 5:
    case 6:
    case 7:
      mevsim = "yaz";
      break;
    case 8:
    case 9:
    case 10:
      mevsim = "sonbahar";
      break;
    default:
      break;
  }

  if (mevsimler3[i] == okunanAy)
  {
    Console.WriteLine($"{i}.ay {okunanAy} mevsimlerden {mevsim}");
    break;
  }
}

*/

#endregion

------------------------------------

#region CokBoyutluDiziMevsimler

/*

// çok boyutlu dizi ile

// çok boyutlu dizi yada başka

string[,] mevsimler2 = new string[4, 3];
mevsimler2[0, 0] = "Aralık";
mevsimler2[0, 1] = "Ocak";
mevsimler2[0, 2] = "Şubat";


mevsimler2[1, 0] = "Mart";
mevsimler2[1, 1] = "Nisan";
mevsimler2[1, 2] = "Mayıs";


mevsimler2[2, 0] = "Haziran";
mevsimler2[2, 1] = "Temmuz";
mevsimler2[2, 2] = "Ağustos";


mevsimler2[3, 0] = "Eylül";
mevsimler2[3, 1] = "Ekim";
mevsimler2[3, 2] = "Kasım";

Console.WriteLine("Bir ay giriniz");
string ay = Console.ReadLine();

int aySirasi = 0;

for (int mevsimIndex = 0; mevsimIndex < 4; mevsimIndex++)
{


  for (int ayIndex = 0; ayIndex < 3; ayIndex++)
  {
    string suankiAy = mevsimler2[mevsimIndex, ayIndex];
    aySirasi++;
    string mevsim = string.Empty;

    switch (mevsimIndex)
    {
      case 0:
        mevsim = "kış";
        break;
      case 1:
        mevsim = "ilkbahar";
        break;
      case 2:
        mevsim = "yaz";
        break;
      case 3:
        mevsim = "sonbahar";
        break;
      default:
        break;
    }

    if (suankiAy == ay)
    {

      if (suankiAy == "Aralık")
        aySirasi = 12; // istisna
      else
        aySirasi = aySirasi - 1; // aralık 12. ay olup kış

      Console.WriteLine($" girilin ay : {aySirasi}. ay mevsim ise {mevsim}");
      break;
    }

    //Console.WriteLine(mevsimler2[mevsimIndex,ayIndex]);
  }
}

*/

#endregion


















-----------------------

//Donguler

//for, while
//once sart, sonra islem
//do-while
//once islem sonra sart
//sarta kadar en az 1 kere çalışır...

//foreach: en farklı olan dongu
//Koleksiyonlar uzerinde calisir...
//Readonly dir...

//break:donguden çıkmak için kullanılır...
//gordugu anda donguyu bitirir...

do {
    //
    //
    break;
    Console.WriteLine("islem");

}while(true);

//break, continue kullanımı...

for (int i = 0; i < 10; i++)
{
    if (i == 5 || i==6) continue;
    Console.WriteLine(i);
}

//continue:sadece o adımı iptal eder...

//goto: Moduler programlamaya uygun bir kullanım değildir...
//Assembly
